{"ast":null,"code":"class Api {\n  constructor(options) {\n    this.options = options;\n  }\n  getCards() {\n    return this.request('/cards');\n  }\n  getMe() {\n    return this.request('/users/me');\n  }\n  setMe(data) {\n    return this.request('/users/me', {\n      method: 'PATCH',\n      body: this.getBody(data)\n    });\n  }\n  getAllData() {\n    return Promise.all([this.getMe(), this.getCards()]);\n  }\n  createCard(data) {\n    return this.request('/cards', {\n      method: 'POST',\n      body: this.getBody(data)\n    });\n  }\n  removeCard(cardId) {\n    return this.request(`/cards/${cardId}`, {\n      method: 'DELETE'\n    });\n  }\n  like(cardId) {\n    return this.request(`/cards/${cardId}/likes`, {\n      method: 'PUT'\n    });\n  }\n  dislike(cardId) {\n    return this.request(`/cards/${cardId}/likes`, {\n      method: 'DELETE'\n    });\n  }\n  setAvatar(avatar) {\n    return this.request(`/users/me/avatar`, {\n      method: 'PATCH',\n      body: this.getBody({\n        avatar\n      })\n    });\n  }\n  request(path) {\n    let init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return fetch(this.options.baseUrl + path, {\n      ...init,\n      headers: {\n        ...this.options.headers,\n        ...init.headers\n      }\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      } else {\n        return Promise.reject(res);\n      }\n    });\n  }\n  getBody(data) {\n    return JSON.stringify(data);\n  }\n}\nexport const api = new Api({\n  baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-55',\n  headers: {\n    'authorization': '9c0c6a9e-7d3d-49e1-be95-1a9e7dd07b2f',\n    'Content-Type': 'application/json'\n  }\n});","map":{"version":3,"names":["Api","constructor","options","getCards","request","getMe","setMe","data","method","body","getBody","getAllData","Promise","all","createCard","removeCard","cardId","like","dislike","setAvatar","avatar","path","init","fetch","baseUrl","headers","then","res","ok","json","reject","JSON","stringify","api"],"sources":["/Users/andrei/Desktop/react-mesto-auth/src/utils/api.js"],"sourcesContent":["class Api {\n  constructor(options) {\n    this.options = options;\n  }\n\n  getCards() {\n    return this.request('/cards');\n  }\n\n  getMe() {\n    return this.request('/users/me');\n  }\n\n  setMe(data) {\n    return this.request('/users/me', {\n      method: 'PATCH',\n      body: this.getBody(data),\n    });\n  }\n\n  getAllData() {\n    return Promise.all([this.getMe(), this.getCards()])\n  }\n\n  createCard(data) {\n    return this.request('/cards', {\n      method: 'POST',\n      body: this.getBody(data),\n    });\n  }\n\n  removeCard(cardId) {\n    return this.request(`/cards/${cardId}`, {\n      method: 'DELETE',\n    });\n  }\n\n  like(cardId) {\n    return this.request(`/cards/${cardId}/likes`, {\n      method: 'PUT',\n    });\n  }\n\n  dislike(cardId) {\n    return this.request(`/cards/${cardId}/likes`, {\n      method: 'DELETE',\n    });\n  }\n\n  setAvatar(avatar) {\n    return this.request(`/users/me/avatar`, {\n      method: 'PATCH',\n      body: this.getBody({ avatar }),\n    });\n  }\n\n  request(path, init = {}) {\n    return fetch(this.options.baseUrl + path, {\n      ...init,\n      headers: {\n        ...this.options.headers,\n        ...init.headers,\n      },\n    })\n      .then((res) => {\n        if (res.ok) {\n          return res.json();\n        } else {\n          return Promise.reject(res);\n        }\n      })\n  }\n\n  getBody(data) {\n    return JSON.stringify(data);\n  }\n}\n\nexport const api = new Api({\n  baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-55',\n  headers: {\n    'authorization': '9c0c6a9e-7d3d-49e1-be95-1a9e7dd07b2f',\n    'Content-Type': 'application/json',\n  },\n});"],"mappings":"AAAA,MAAMA,GAAG,CAAC;EACRC,WAAW,CAACC,OAAO,EAAE;IACnB,IAAI,CAACA,OAAO,GAAGA,OAAO;EACxB;EAEAC,QAAQ,GAAG;IACT,OAAO,IAAI,CAACC,OAAO,CAAC,QAAQ,CAAC;EAC/B;EAEAC,KAAK,GAAG;IACN,OAAO,IAAI,CAACD,OAAO,CAAC,WAAW,CAAC;EAClC;EAEAE,KAAK,CAACC,IAAI,EAAE;IACV,OAAO,IAAI,CAACH,OAAO,CAAC,WAAW,EAAE;MAC/BI,MAAM,EAAE,OAAO;MACfC,IAAI,EAAE,IAAI,CAACC,OAAO,CAACH,IAAI;IACzB,CAAC,CAAC;EACJ;EAEAI,UAAU,GAAG;IACX,OAAOC,OAAO,CAACC,GAAG,CAAC,CAAC,IAAI,CAACR,KAAK,EAAE,EAAE,IAAI,CAACF,QAAQ,EAAE,CAAC,CAAC;EACrD;EAEAW,UAAU,CAACP,IAAI,EAAE;IACf,OAAO,IAAI,CAACH,OAAO,CAAC,QAAQ,EAAE;MAC5BI,MAAM,EAAE,MAAM;MACdC,IAAI,EAAE,IAAI,CAACC,OAAO,CAACH,IAAI;IACzB,CAAC,CAAC;EACJ;EAEAQ,UAAU,CAACC,MAAM,EAAE;IACjB,OAAO,IAAI,CAACZ,OAAO,CAAE,UAASY,MAAO,EAAC,EAAE;MACtCR,MAAM,EAAE;IACV,CAAC,CAAC;EACJ;EAEAS,IAAI,CAACD,MAAM,EAAE;IACX,OAAO,IAAI,CAACZ,OAAO,CAAE,UAASY,MAAO,QAAO,EAAE;MAC5CR,MAAM,EAAE;IACV,CAAC,CAAC;EACJ;EAEAU,OAAO,CAACF,MAAM,EAAE;IACd,OAAO,IAAI,CAACZ,OAAO,CAAE,UAASY,MAAO,QAAO,EAAE;MAC5CR,MAAM,EAAE;IACV,CAAC,CAAC;EACJ;EAEAW,SAAS,CAACC,MAAM,EAAE;IAChB,OAAO,IAAI,CAAChB,OAAO,CAAE,kBAAiB,EAAE;MACtCI,MAAM,EAAE,OAAO;MACfC,IAAI,EAAE,IAAI,CAACC,OAAO,CAAC;QAAEU;MAAO,CAAC;IAC/B,CAAC,CAAC;EACJ;EAEAhB,OAAO,CAACiB,IAAI,EAAa;IAAA,IAAXC,IAAI,uEAAG,CAAC,CAAC;IACrB,OAAOC,KAAK,CAAC,IAAI,CAACrB,OAAO,CAACsB,OAAO,GAAGH,IAAI,EAAE;MACxC,GAAGC,IAAI;MACPG,OAAO,EAAE;QACP,GAAG,IAAI,CAACvB,OAAO,CAACuB,OAAO;QACvB,GAAGH,IAAI,CAACG;MACV;IACF,CAAC,CAAC,CACCC,IAAI,CAAEC,GAAG,IAAK;MACb,IAAIA,GAAG,CAACC,EAAE,EAAE;QACV,OAAOD,GAAG,CAACE,IAAI,EAAE;MACnB,CAAC,MAAM;QACL,OAAOjB,OAAO,CAACkB,MAAM,CAACH,GAAG,CAAC;MAC5B;IACF,CAAC,CAAC;EACN;EAEAjB,OAAO,CAACH,IAAI,EAAE;IACZ,OAAOwB,IAAI,CAACC,SAAS,CAACzB,IAAI,CAAC;EAC7B;AACF;AAEA,OAAO,MAAM0B,GAAG,GAAG,IAAIjC,GAAG,CAAC;EACzBwB,OAAO,EAAE,6CAA6C;EACtDC,OAAO,EAAE;IACP,eAAe,EAAE,sCAAsC;IACvD,cAAc,EAAE;EAClB;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}